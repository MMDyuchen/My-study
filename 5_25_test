5_25_test
int arr[10] = { 0 };
printf("%p\n", arr);//地址1
printf("%p\n", arr+1);//地址1+4

printf("%p\n", &arr[0]);//地址1
printf("%p\n", &arr[0]+1);//地址1+4

printf("%p\n", &arr);//地址1
printf("%p\n", &arr+1);//地址1+40（加一整个数组）


{
	int a = 10;
	int b = 20;
	int c = 30;
	int* arr2[3] = {&a,&b&c};//指针数组
	int i = 0;
	for (i = 0; i <3; i++)
	{
	printf("%d ", *(arr3[i]));
	}
}
结果为10，20，30

int a = 10;
int* pa = &a;
int** ppa = &pa;//ppa就是二级指针


此代码有问题，使用已被释放的空间
int* test()
{
	int a = 10;
	return &a;
}
int main()
{
	int* p = test();
	printf("%d\n", *p);
	return 0;
}

{
	int a[10] = { 0 };
	int i = 0;
	int* p = a;
	for (i = 0;i<=12;i++)
		{
			*p = i;
			p++;
		}
	return 0;
}

{
	//未初始化指针
	int* p;//局部变量不初始化
	*p = 20;
	return 0;
}


int*p; p+1 --> 4
char*p;p+1 --> 1
double*p ; p+1 --> 8

int*p;*p 能够访问4个字节
char*p 能够访问1个字节
double*p 能够访问8个字节
